@namespace(uri="is", prefix="is")
package istar;

@gmf.diagram
class ISTAR {
  @"http://www.eclipse.org/emf/2002/Ecore/OCL/Pivot"(body="self.hasNode->select(n : Node | n.oclIsKindOf(Actor))->size()")
  !ordered op Integer NAct();

  @"http://www.eclipse.org/emf/2002/Ecore/OCL/Pivot"(body="self.NEOAB() + self.NEIAB()")
  !ordered op Integer NElem();

  @"http://www.eclipse.org/emf/2002/Ecore/OCL/Pivot"(body="self.hasNode->select(n : Node | n.oclIsKindOf(Element))->size()")
  !ordered op Integer NEOAB();

  @"http://www.eclipse.org/emf/2002/Ecore/OCL/Pivot"(body="self.hasNode->select(n : Node | n.oclIsKindOf(Actor))->iterate(n : Node; total : Integer = 0 | let nei : Integer = n.oclAsType(Actor).NEI() in total + nei)")
  !ordered op Integer NEIAB();

  @"http://www.eclipse.org/emf/2002/Ecore/OCL/Pivot"(body="self.hasNode->select(n : Node | n.oclIsKindOf(Actor))->iterate(n : Node; min : Integer = -1 | let nei : Integer = n.oclAsType(Actor).NEI() in if min = -1 then nei else min.min(nei) endif)")
  !ordered op Integer MinNEIAB();

  @"http://www.eclipse.org/emf/2002/Ecore/OCL/Pivot"(body="self.hasNode->select(n : Node | n.oclIsKindOf(Actor))->iterate(n : Node; max : Integer = -1 | let nei : Integer = n.oclAsType(Actor).NEI() in if max = -1 then nei else max.max(nei) endif)")
  !ordered op Integer MaxNEIAB();

  @"http://www.eclipse.org/emf/2002/Ecore/OCL/Pivot"(body="self.NEIAB() / self.NAct()", pre_nact="self.NAct() > 0")
  !ordered op Double AvgNEIAB();

  @"http://www.eclipse.org/emf/2002/Ecore/OCL/Pivot"(body="self.hasNode->select(n : Node | n.oclIsKindOf(Actor))->iterate(n : Node; total : Integer = 0 | let ngi : Integer = n.oclAsType(Actor).NGI() in total + ngi)")
  !ordered op Integer NGIAB();

  @"http://www.eclipse.org/emf/2002/Ecore/OCL/Pivot"(body="self.hasNode->select(n : Node | n.oclIsKindOf(Actor))->iterate(n : Node; total : Integer = 0 | let ndgi : Integer = n.oclAsType(Actor).NDGI() in total + ndgi)")
  !ordered op Integer NDAG();

  @"http://www.eclipse.org/emf/2002/Ecore/OCL/Pivot"(body="self.hasNode->select(n : Node | n.oclIsKindOf(Actor) and n.oclAsType(Actor).MinNDGI() > 0)->iterate(n : Node; min : Integer = -1 | let minndgi : Integer = n.oclAsType(Actor).MinNDGI() in if min = -1 then minndgi else min.min(minndgi) endif)")
  !ordered op Integer MinNDAG();

  @"http://www.eclipse.org/emf/2002/Ecore/OCL/Pivot"(body="self.hasNode->select(n : Node | n.oclIsKindOf(Actor) and n.oclAsType(Actor).MaxNDGI() > 0)->iterate(n : Node; max : Integer = -1 | let maxndgi : Integer = n.oclAsType(Actor).MaxNDGI() in if max = -1 then maxndgi else max.max(maxndgi) endif)")
  !ordered op Integer MaxNDAG();

  @"http://www.eclipse.org/emf/2002/Ecore/OCL/Pivot"(body="self.NDAG() / self.NGWD()", pre_NGWD="self.NGWD() > 0")
  !ordered op Double AvgNDAG();

  @"http://www.eclipse.org/emf/2002/Ecore/OCL/Pivot"(body="self.hasNode->select(n : Node | n.oclIsKindOf(Actor))->iterate(n : Node; total : Integer = 0 | let ngwdi : Integer = n.oclAsType(Actor).NGWDI() in total + ngwdi)")
  !ordered op Integer NGWD();

  @"http://www.eclipse.org/emf/2002/Ecore/OCL/Pivot"(body="self.hasNode->select(n : Node | n.oclIsKindOf(Actor))->iterate(n : Node; total : Integer = 0 | let nsi : Integer = n.oclAsType(Actor).NSI() in total + nsi)")
  !ordered op Integer NSIAB();

  @"http://www.eclipse.org/emf/2002/Ecore/OCL/Pivot"(body="self.hasNode->select(n : Node | n.oclIsKindOf(Actor))->iterate(n : Node; total : Integer = 0 | let ndsi : Integer = n.oclAsType(Actor).NDSI() in total + ndsi)")
  !ordered op Integer NDAS();

  @"http://www.eclipse.org/emf/2002/Ecore/OCL/Pivot"(body="self.hasNode->select(n : Node | n.oclIsKindOf(Actor) and n.oclAsType(Actor).MinNDSI() > 0)->iterate(n : Node; min : Integer = -1 | let minndsi : Integer = n.oclAsType(Actor).MinNDSI() in if min = -1 then minndsi else min.min(minndsi) endif)")
  !ordered op Integer MinNDAS();

  @"http://www.eclipse.org/emf/2002/Ecore/OCL/Pivot"(body="self.hasNode->select(n : Node | n.oclIsKindOf(Actor) and n.oclAsType(Actor).MaxNDSI() > 0)->iterate(n : Node; max : Integer = -1 | let maxndsi : Integer = n.oclAsType(Actor).MaxNDSI() in if max = -1 then maxndsi else max.max(maxndsi) endif)")
  !ordered op Integer MaxNDAS();

  @"http://www.eclipse.org/emf/2002/Ecore/OCL/Pivot"(body="self.NDAS() / self.NSWD()", pre_NSWD="self.NSWD() > 0")
  !ordered op Double AvgNDAS();

  @"http://www.eclipse.org/emf/2002/Ecore/OCL/Pivot"(body="self.hasNode->select(n : Node | n.oclIsKindOf(Actor))->iterate(n : Node; total : Integer = 0 | let nswdi : Integer = n.oclAsType(Actor).NSWDI() in total + nswdi)")
  !ordered op Integer NSWD();

  @"http://www.eclipse.org/emf/2002/Ecore/OCL/Pivot"(body="self.hasNode->select(n : Node | n.oclIsKindOf(Actor))->iterate(n : Node; total : Integer = 0 | let nti : Integer = n.oclAsType(Actor).NTI() in total + nti)")
  !ordered op Integer NTIAB();

  @"http://www.eclipse.org/emf/2002/Ecore/OCL/Pivot"(body="self.hasNode->select(n : Node | n.oclIsKindOf(Actor))->iterate(n : Node; total : Integer = 0 | let ndti : Integer = n.oclAsType(Actor).NDTI() in total + ndti)")
  !ordered op Integer NDAT();

  @"http://www.eclipse.org/emf/2002/Ecore/OCL/Pivot"(body="self.hasNode->select(n : Node | n.oclIsKindOf(Actor) and n.oclAsType(Actor).MinNDTI() > 0)->iterate(n : Node; min : Integer = -1 | let minndti : Integer = n.oclAsType(Actor).MinNDTI() in if min = -1 then minndti else min.min(minndti) endif)")
  !ordered op Integer MinNDAT();

  @"http://www.eclipse.org/emf/2002/Ecore/OCL/Pivot"(body="self.hasNode->select(n : Node | n.oclIsKindOf(Actor) and n.oclAsType(Actor).MaxNDTI() > 0)->iterate(n : Node; max : Integer = -1 | let maxndti : Integer = n.oclAsType(Actor).MaxNDTI() in if max = -1 then maxndti else max.max(maxndti) endif)")
  !ordered op Integer MaxNDAT();

  @"http://www.eclipse.org/emf/2002/Ecore/OCL/Pivot"(body="self.NDAT() / self.NTWD()", pre_NTWD="self.NTWD() > 0")
  !ordered op Double AvgNDAT();

  @"http://www.eclipse.org/emf/2002/Ecore/OCL/Pivot"(body="self.hasNode->select(n : Node | n.oclIsKindOf(Actor))->iterate(n : Node; total : Integer = 0 | let ntwdi : Integer = n.oclAsType(Actor).NTWDI() in total + ntwdi)")
  !ordered op Integer NTWD();

  @"http://www.eclipse.org/emf/2002/Ecore/OCL/Pivot"(body="self.hasNode->select(n : Node | n.oclIsKindOf(Actor))->iterate(n : Node; total : Integer = 0 | let nid : Integer = n.oclAsType(Actor).NID() in total + nid)")
  !ordered op Integer NIDA();

  @"http://www.eclipse.org/emf/2002/Ecore/OCL/Pivot"(body="self.hasNode->select(n : Node | n.oclIsKindOf(Actor))->iterate(n : Node; total : Integer = 0 | let nod : Integer = n.oclAsType(Actor).NOD() in total + nod)")
  !ordered op Integer NODA();

  @"http://www.eclipse.org/emf/2002/Ecore/OCL/Pivot"(body="self.NEIAB() - (self.NEIAgentB() + self.NEIRoleB() + self.NEIPosB())")
  !ordered op Integer NEIActB();

  @"http://www.eclipse.org/emf/2002/Ecore/OCL/Pivot"(body="self.hasNode->select(n : Node | n.oclIsKindOf(Agent))->iterate(n : Node; total : Integer = 0 | let neia : Integer = n.oclAsType(Agent).NEIA() in total + neia)")
  !ordered op Integer NEIAgentB();

  @"http://www.eclipse.org/emf/2002/Ecore/OCL/Pivot"(body="self.hasNode->select(n : Node | n.oclIsKindOf(Role))->iterate(n : Node; total : Integer = 0 | let neir : Integer = n.oclAsType(Role).NEIR() in total + neir)")
  !ordered op Integer NEIRoleB();

  @"http://www.eclipse.org/emf/2002/Ecore/OCL/Pivot"(body="self.hasNode->select(n : Node | n.oclIsKindOf(Position))->iterate(n : Node; total : Integer = 0 | let neip : Integer = n.oclAsType(Position).NEIP() in total + neip)")
  !ordered op Integer NEIPosB();

  @"http://www.eclipse.org/emf/2002/Ecore/OCL/Pivot"(body="self.NAct() - (self.NAgents() + self.NRoles() + self.NPos())")
  !ordered op Integer NActors();

  @"http://www.eclipse.org/emf/2002/Ecore/OCL/Pivot"(body="self.hasNode->select(n : Node | n.oclIsKindOf(Agent))->size()")
  !ordered op Integer NAgents();

  @"http://www.eclipse.org/emf/2002/Ecore/OCL/Pivot"(body="self.hasNode->select(n : Node | n.oclIsKindOf(Role))->size()")
  !ordered op Integer NRoles();

  @"http://www.eclipse.org/emf/2002/Ecore/OCL/Pivot"(body="self.hasNode->select(n : Node | n.oclIsKindOf(Position))->size()")
  !ordered op Integer NPos();

  @"http://www.eclipse.org/emf/2002/Ecore/OCL/Pivot"(body="(self.NAgents() + self.NRoles() + self.NPos()) / self.NAct()", pre_NAct="self.NAct() > 0")
  !ordered op Double PSAct();

  @"http://www.eclipse.org/emf/2002/Ecore/OCL/Pivot"(body="self.NGWD() / self.NGIAB()", pre_NGIAB="self.NGIAB() > 0")
  !ordered op Double PGWD();

  @"http://www.eclipse.org/emf/2002/Ecore/OCL/Pivot"(body="self.NSWD() / self.NSIAB()", pre_NSIAB="self.NSIAB() > 0")
  !ordered op Double PSWD();

  @"http://www.eclipse.org/emf/2002/Ecore/OCL/Pivot"(body="self.NTWD() / self.NTIAB()", pre_NTIAB="self.NTIAB() > 0")
  !ordered op Double PTWD();

  @"http://www.eclipse.org/emf/2002/Ecore/OCL/Pivot"(body="self.hasNode->select(n : Node | n.oclIsKindOf(Actor) and n.oclAsType(Actor).NEI() > 0)->size()")
  !ordered op Integer NAWEI();

  @"http://www.eclipse.org/emf/2002/Ecore/OCL/Pivot"(body="self.NAWEI() / self.NAct()", pre_NAct="self.NAct() > 0")
  !ordered op Double PAWEI();

  @"http://www.eclipse.org/emf/2002/Ecore/OCL/Pivot"(body="self.hasNode->select(n : Node | n.oclIsKindOf(Actor))->iterate(n : Node; total : Integer = 0 | let nuei : Integer = n.oclAsType(Actor).NUEI() in total + nuei)")
  !ordered op Integer NUEIAB();

  @"http://www.eclipse.org/emf/2002/Ecore/OCL/Pivot"(body="self.NUEIAB() / self.NEIAB()", pre_NEIAB="self.NEIAB() > 0")
  !ordered op Double PUEIAB();

  @"http://www.eclipse.org/emf/2002/Ecore/OCL/Pivot"(body="self.hasNode->select(n : Node | n.oclIsKindOf(Actor) and n.oclAsType(Actor).NUEI() > 0)->size()")
  !ordered op Integer NAWUEI();

  @"http://www.eclipse.org/emf/2002/Ecore/OCL/Pivot"(body="self.NAWUEI() / self.NAct()", pre_NAct="self.NAct() > 0")
  !ordered op Double PAWUEI();

  @"http://www.eclipse.org/emf/2002/Ecore/OCL/Pivot"(body="1 - self.PAWUEI()")
  !ordered op Double PAWOUEI();

  @"http://www.eclipse.org/emf/2002/Ecore/OCL/Pivot"(body="self.NIDA() + self.NODA()")
  !ordered op Integer NDA();

  @"http://www.eclipse.org/emf/2002/Ecore/OCL/Pivot"(body="self.NIDA() / self.NDA()", pre_NDA="self.NDA() > 0")
  !ordered op Double PIDA();

  @"http://www.eclipse.org/emf/2002/Ecore/OCL/Pivot"(body="self.NODA() / self.NDA()", pre_NDA="self.NDA() > 0")
  !ordered op Double PODA();

  @"http://www.eclipse.org/emf/2002/Ecore/OCL/Pivot"(body="self.hasNode->select(n : Node | n.oclIsKindOf(Actor) and n.oclAsType(Actor).ND() > 0)->size()")
  !ordered op Integer NAWD();

  @"http://www.eclipse.org/emf/2002/Ecore/OCL/Pivot"(body="self.NAWD() / self.NAct()", pre_NAct="self.NAct() > 0")
  !ordered op Double PAWD();

  @"http://www.eclipse.org/emf/2002/Ecore/OCL/Pivot"(body="1 - self.PAWD()")
  !ordered op Double PAWOD();
  val Node[*] hasNode;
  attr String modelName;
  val Relationship[*] hasRelationship;
}

class Node {
  attr String nodeName;
  ref DependencyLink[*]#dependencyNode nodeDependency;
  ref DependencyLink[*]#dependencySecondNode secondNodeDependency;
  attr NFR[*] nodeNFR = "unknown";
}

class Relationship {
  attr String relationshipName;
  attr String source;
  attr String target;
  attr NFR[*] relationshipNFR = "unknown";
}

abstract class Actors extends Node {

  @gmf.compartment
  unsettable val Element[*] hasElement;
}

@gmf.node(color="249,249,249", border.color="0,0,0", label="nodeName")
class Actor extends Actors {

  @"http://www.eclipse.org/emf/2002/Ecore/OCL/Pivot"(body="self.hasElement->select(e : Element | e.oclIsKindOf(Element))->size()")
  !ordered op Integer NEI();

  @"http://www.eclipse.org/emf/2002/Ecore/OCL/Pivot"(body="self.hasElement->select(e : Element | e.oclIsKindOf(Goal))->size()")
  !ordered op Integer NGI();

  @"http://www.eclipse.org/emf/2002/Ecore/OCL/Pivot"(body="self.hasElement->select(e : Element | e.oclIsKindOf(Goal))->iterate(e : Element; total : Integer = 0 | let ndg : Integer = e.oclAsType(Goal).NDG() in total + ndg)")
  !ordered op Integer NDGI();

  @"http://www.eclipse.org/emf/2002/Ecore/OCL/Pivot"(body="self.hasElement->select(e : Element | e.oclIsKindOf(Goal) and e.oclAsType(Goal).NDG() > 0)->size()")
  !ordered op Integer NGWDI();

  @"http://www.eclipse.org/emf/2002/Ecore/OCL/Pivot"(body="self.hasElement->select(e : Element | e.oclIsKindOf(Goal) and e.oclAsType(Goal).NDG() > 0)->iterate(e : Element; min : Integer = -1 | let ndg : Integer = e.oclAsType(Goal).NDG() in if min = -1 then ndg else min.min(ndg) endif)")
  !ordered op Integer MinNDGI();

  @"http://www.eclipse.org/emf/2002/Ecore/OCL/Pivot"(body="self.hasElement->select(e : Element | e.oclIsKindOf(Goal) and e.oclAsType(Goal).NDG() > 0)->iterate(e : Element; max : Integer = -1 | let ndg : Integer = e.oclAsType(Goal).NDG() in if max = -1 then ndg else max.max(ndg) endif)")
  !ordered op Integer MaxNDGI();

  @"http://www.eclipse.org/emf/2002/Ecore/OCL/Pivot"(body="self.NDGI() / self.NGWDI()", pre_NGWDI="self.NGWDI() > 0")
  !ordered op Double AvgNDGI();

  @"http://www.eclipse.org/emf/2002/Ecore/OCL/Pivot"(body="self.hasElement->select(e : Element | e.oclIsKindOf(Softgoal))->size()")
  !ordered op Integer NSI();

  @"http://www.eclipse.org/emf/2002/Ecore/OCL/Pivot"(body="self.hasElement->select(e : Element | e.oclIsKindOf(Softgoal))->iterate(e: Element; total : Integer = 0 | let nds : Integer = e.oclAsType(Softgoal).NDS() in total + nds)")
  !ordered op Integer NDSI();

  @"http://www.eclipse.org/emf/2002/Ecore/OCL/Pivot"(body="self.hasElement->select(e : Element | e.oclIsKindOf(Softgoal) and e.oclAsType(Softgoal).NDS() > 0)->size()")
  !ordered op Integer NSWDI();

  @"http://www.eclipse.org/emf/2002/Ecore/OCL/Pivot"(body="self.hasElement->select(e : Element | e.oclIsKindOf(Softgoal) and e.oclAsType(Softgoal).NDS() > 0)->iterate(e : Element; min : Integer = -1 | let nds : Integer = e.oclAsType(Softgoal).NDS() in if min = -1 then nds else min.min(nds) endif)")
  !ordered op Integer MinNDSI();

  @"http://www.eclipse.org/emf/2002/Ecore/OCL/Pivot"(body="self.hasElement->select(e : Element | e.oclIsKindOf(Softgoal) and e.oclAsType(Softgoal).NDS() > 0)->iterate(e : Element; max : Integer = -1 | let nds : Integer = e.oclAsType(Softgoal).NDS() in if max = -1 then nds else max.max(nds) endif)")
  !ordered op Integer MaxNDSI();

  @"http://www.eclipse.org/emf/2002/Ecore/OCL/Pivot"(body="self.NDSI() / self.NSWDI()", pre_NTWDI="self.NSWDI() > 0")
  !ordered op Double AvgNDSI();

  @"http://www.eclipse.org/emf/2002/Ecore/OCL/Pivot"(body="self.hasElement->select(e : Element | e.oclIsKindOf(Task))->size()")
  !ordered op Integer NTI();

  @"http://www.eclipse.org/emf/2002/Ecore/OCL/Pivot"(body="self.hasElement->select(e : Element | e.oclIsKindOf(Task))->iterate(e : Element; total : Integer = 0 | let ndt : Integer = e.oclAsType(Task).NDT() in total + ndt)")
  !ordered op Integer NDTI();

  @"http://www.eclipse.org/emf/2002/Ecore/OCL/Pivot"(body="self.hasElement->select(e : Element | e.oclIsKindOf(Task) and e.oclAsType(Task).NDT() > 0)->iterate(e : Element; min : Integer = -1 | let ndt : Integer = e.oclAsType(Task).NDT() in if min = -1 then ndt else min.min(ndt) endif)")
  !ordered op Integer MinNDTI();

  @"http://www.eclipse.org/emf/2002/Ecore/OCL/Pivot"(body="self.hasElement->select(e : Element | e.oclIsKindOf(Task) and e.oclAsType(Task).NDT() > 0)->iterate(e : Element; max : Integer = -1 | let ndt : Integer = e.oclAsType(Task).NDT() in if max = -1 then ndt else max.max(ndt) endif)")
  !ordered op Integer MaxNDTI();

  @"http://www.eclipse.org/emf/2002/Ecore/OCL/Pivot"(body="self.NDTI() / self.NTWDI()", pre_NTWDI="self.NTWDI() > 0")
  !ordered op Double AvgNDTI();

  @"http://www.eclipse.org/emf/2002/Ecore/OCL/Pivot"(body="self.hasElement->select(e : Element | e.oclIsKindOf(Task) and e.oclAsType(Task).NDT() > 0)->size()")
  !ordered op Integer NTWDI();

  @"http://www.eclipse.org/emf/2002/Ecore/OCL/Pivot"(body="self.hasElement->select(e : Element | e.oclIsKindOf(Goal) and e.oclAsType(Goal).NLG() = 0)->size()")
  !ordered op Integer NUGI();

  @"http://www.eclipse.org/emf/2002/Ecore/OCL/Pivot"(body="self.hasElement->select(e : Element | e.oclIsKindOf(Softgoal) and e.oclAsType(Softgoal).NLS() = 0)->size()")
  !ordered op Integer NUSI();

  @"http://www.eclipse.org/emf/2002/Ecore/OCL/Pivot"(body="self.hasElement->select(e : Element | e.oclIsKindOf(Task) and e.oclAsType(Task).NLT() = 0)->size()")
  !ordered op Integer NUTI();

  @"http://www.eclipse.org/emf/2002/Ecore/OCL/Pivot"(body="self.hasElement->select(e : Element | e.oclIsKindOf(Resource) and e.oclAsType(Resource).NLR() = 0)->size()")
  !ordered op Integer NURI();

  @"http://www.eclipse.org/emf/2002/Ecore/OCL/Pivot"(body="self.hasElement->select(e : Element | e.oclIsKindOf(Belief) and e.oclAsType(Belief).NLB() = 0)->size()")
  !ordered op Integer NUBI();

  @"http://www.eclipse.org/emf/2002/Ecore/OCL/Pivot"(body="self.NUGI() + self.NUSI() + self.NUTI() + self.NURI() + self.NUBI()")
  !ordered op Integer NUEI();

  @"http://www.eclipse.org/emf/2002/Ecore/OCL/Pivot"(body="self.NUEI() / self.NEI()", pre_NEI="self.NEI() > 0")
  !ordered op Double PUEI();

  @"http://www.eclipse.org/emf/2002/Ecore/OCL/Pivot"(body="self.actorDependency->select(dl : DependencyLink | dl.oclIsKindOf(DependeeLink))->size()")
  !ordered op Integer NID();

  @"http://www.eclipse.org/emf/2002/Ecore/OCL/Pivot"(body="self.actorDependency->select(dl : DependencyLink | dl.oclIsKindOf(DependerLink))->size()")
  !ordered op Integer NOD();

  @"http://www.eclipse.org/emf/2002/Ecore/OCL/Pivot"(body="self.NID() + self.NOD()")
  !ordered op Integer ND();

  @"http://www.eclipse.org/emf/2002/Ecore/OCL/Pivot"(body="self.NID() / self.ND()", pre_ND="self.ND() > 0")
  !ordered op Double PID();

  @"http://www.eclipse.org/emf/2002/Ecore/OCL/Pivot"(body="self.NOD() / self.ND()", pre_ND="self.ND() > 0")
  !ordered op Double POD();

  @"http://www.eclipse.org/emf/2002/Ecore/OCL/Pivot"(body="self.actorISA->size()")
  !ordered op Integer NIISA();
  ref ISA[*]#ISAactor actorISA;
  ref ISA[*]#ISAsecondActor secondActorISA;
  ref IsPartOf[*]#isPartOfActor actorIsPartOf;
  ref IsPartOf[*]#isPartOfSecondActor secondActorIsPartOf;
}

@gmf.node(color="249,249,249", border.color="0,0,0", label="nodeName")
class Agent extends Actors {

  @"http://www.eclipse.org/emf/2002/Ecore/OCL/Pivot"(body="self.hasElement->select(e : Element | e.oclIsKindOf(Element))->size()")
  !ordered op Integer NEIA();
  ref Plays[*]#playsAgent agentPlays;
  ref Occupies[*]#occupiesAgent agentOccupies;
  ref INS[*]#INSagent agentINS;
  ref INS[*]#INSsecondAgent secondAgentINS;
}

@gmf.node(color="249,249,249", border.color="0,0,0", label="nodeName")
class Position extends Actors {


  @"http://www.eclipse.org/emf/2002/Ecore/OCL/Pivot"(body="self.hasElement->select(e : Element | e.oclIsKindOf(Element))->size()")
  !ordered op Integer NEIP();
  ref Covers[*]#coversPosition positionCovers;
  ref Occupies[*]#occupiesPosition positionOccupies;
}

@gmf.node(color="249,249,249", border.color="0,0,0", label="nodeName")
class Role extends Actors {

  @"http://www.eclipse.org/emf/2002/Ecore/OCL/Pivot"(body="self.hasElement->select(e : Element | e.oclIsKindOf(Element))->size()")
  !ordered op Integer NEIR();
  ref Plays[*]#playsRole rolePlays;
  ref Covers[*]#coversRole roleCovers;
}

abstract class Element extends Node {
  ref ContributionLink[*]#contributionElement elementContribution;
  ref DecompositionLink[*]#decompositionElement elementDecomposition;
}

@gmf.node(label="nodeName", label.icon="false", color="184,219,255", border.color="0,0,0", size="80,40", figure="polygon", polygon.x="0 0 5 15 35 45 50 50 45 35 15 5", polygon.y="10 20 30 30 30 30 20 10 0 0 0 0")
class Goal extends Element {

  @"http://www.eclipse.org/emf/2002/Ecore/OCL/Pivot"(body="self.goalMeansEnds->select(me : MeansEnds | me.oclIsKindOf(MeansEnds))->size()")
  !ordered op Integer NDG();

  @"http://www.eclipse.org/emf/2002/Ecore/OCL/Pivot"(body="self.elementContribution->select(cl : ContributionLink | cl.oclIsKindOf(ContributionLink))->size()")
  !ordered op Integer NCLG();

  @"http://www.eclipse.org/emf/2002/Ecore/OCL/Pivot"(body="self.elementDecompositionLink->select(dl : DecompositionLink | dl.oclIsKindOf(DecompositionLink))->size()")
  !ordered op Integer NDLG();

  @"http://www.eclipse.org/emf/2002/Ecore/OCL/Pivot"(body="self.NDG() + self.NCLG() + self.NDLG()")
  !ordered op Integer NLG();

  @"http://www.eclipse.org/emf/2002/Ecore/OCL/Pivot"(body="self.secondElementDependency->select(dl : DependencyLink | dl.oclIsKindOf(DepElemLink))->size()")
  !ordered op Integer NIDG();

  @"http://www.eclipse.org/emf/2002/Ecore/OCL/Pivot"(body="self.elementDependency->select(dl : DependencyLink | dl.oclIsKindOf(DepElemLink))->size()")
  !ordered op Integer NODG();

  @"http://www.eclipse.org/emf/2002/Ecore/OCL/Pivot"(body="self.NIDG() + self.NODG()")
  !ordered op Integer NDepG();
  ref MeansEnd[*]#meansEndGoal goalMeansEnd;
}

@gmf.node(label="nodeName", label.icon="false", color="206,255,153", border.color="0,0,0", size="80,40", figure="polygon", polygon.x="0 0 5 15 25 35 45 50 50 45 35 25 15 5", polygon.y="10 20 30 30 25 30 30 20 10 0 0 5 0 0")
class Softgoal extends Element {

  @"http://www.eclipse.org/emf/2002/Ecore/OCL/Pivot"(body="self.softgoalContribution->select(cl : ContributionLink | cl.oclIsKindOf(ContributionLink))->size()")
  !ordered op Integer NDS();

  @"http://www.eclipse.org/emf/2002/Ecore/OCL/Pivot"(body="self.elementContribution->select(cl : ContributionLink | cl.oclIsKindOf(ContributionLink))->size()")
  !ordered op Integer NCLS();

  @"http://www.eclipse.org/emf/2002/Ecore/OCL/Pivot"(body="self.elementDecompositionLink->select(dl : DecompositionLink | dl.oclIsKindOf(DecompositionLink))->size()")
  !ordered op Integer NDLS();

  @"http://www.eclipse.org/emf/2002/Ecore/OCL/Pivot"(body="self.NDS() + self.NCLS() + self.NDLS()")
  !ordered op Integer NLS();

  @"http://www.eclipse.org/emf/2002/Ecore/OCL/Pivot"(body="self.secondElementDependency->select(dl : DependencyLink | dl.oclIsKindOf(DepElemLink))->size()")
  !ordered op Integer NIDS();

  @"http://www.eclipse.org/emf/2002/Ecore/OCL/Pivot"(body="self.elementDependency->select(dl : DependencyLink | dl.oclIsKindOf(DepElemLink))->size()")
  !ordered op Integer NODS();

  @"http://www.eclipse.org/emf/2002/Ecore/OCL/Pivot"(body="self.NIDS() + self.NODS()")
  !ordered op Integer NDepS();
  ref ContributionLink[*]#contributionSoftgoal softgoalContribution;
}

@gmf.node(label="nodeName", label.icon="false", color="255,227,143", border.color="0,0,0", size="80,40", figure="polygon", polygon.x="0 10 50 60 50 10", polygon.y="15 30 30 15 0 0")
class Task extends Element {

  @"http://www.eclipse.org/emf/2002/Ecore/OCL/Pivot"(body="self.taskDecompositionLink->select(dl : DecompositionLink | dl.oclIsKindOf(DecompositionLink))->size()")
  !ordered op Integer NDT();

  @"http://www.eclipse.org/emf/2002/Ecore/OCL/Pivot"(body="self.elementContribution->select(cl : ContributionLink | cl.oclIsKindOf(ContributionLink))->size()")
  !ordered op Integer NCLT();

  @"http://www.eclipse.org/emf/2002/Ecore/OCL/Pivot"(body="self.elementDecompositionLink->select(dl : DecompositionLink | dl.oclIsKindOf(DecompositionLink))->size()")
  !ordered op Integer NDLT();

  @"http://www.eclipse.org/emf/2002/Ecore/OCL/Pivot"(body="self.NDT() + self.NCLT() + self.NDLT()")
  !ordered op Integer NLT();

  @"http://www.eclipse.org/emf/2002/Ecore/OCL/Pivot"(body="self.secondElementDependency->select(dl : DependencyLink | dl.oclIsKindOf(DepElemLink))->size()")
  !ordered op Integer NIDT();

  @"http://www.eclipse.org/emf/2002/Ecore/OCL/Pivot"(body="self.elementDependency->select(dl : DependencyLink | dl.oclIsKindOf(DepElemLink))->size()")
  !ordered op Integer NODT();

  @"http://www.eclipse.org/emf/2002/Ecore/OCL/Pivot"(body="self.NIDT() + self.NODT()")
  !ordered op Integer NDepT();
  ref MeansEnd[*]#meansEndTask taskMeansEnd;
  ref DecompositionLink[*]#decompositionTask taskDecomposition;
}

@gmf.node(label="nodeName", label.icon="false", color="255,255,179", border.color="0,0,0", size="80,40", figure="rectangle")
class Resource extends Element {

  @"http://www.eclipse.org/emf/2002/Ecore/OCL/Pivot"(body="self.elementContribution->select(cl : ContributionLink | cl.oclIsKindOf(ContributionLink))->size()")
  !ordered op Integer NCLR();

  @"http://www.eclipse.org/emf/2002/Ecore/OCL/Pivot"(body="self.elementDecompositionLink->select(dl : DecompositionLink | dl.oclIsKindOf(DecompositionLink))->size()")
  !ordered op Integer NDLR();

  @"http://www.eclipse.org/emf/2002/Ecore/OCL/Pivot"(body="self.NCLR() + self.NDLR()")
  !ordered op Integer NLR();

  @"http://www.eclipse.org/emf/2002/Ecore/OCL/Pivot"(body="self.secondElementDependency->select(dl : DependencyLink | dl.oclIsKindOf(DepElemLink))->size()")
  !ordered op Integer NIDR();

  @"http://www.eclipse.org/emf/2002/Ecore/OCL/Pivot"(body="self.elementDependency->select(dl : DependencyLink | dl.oclIsKindOf(DepElemLink))->size()")
  !ordered op Integer NODR();

  @"http://www.eclipse.org/emf/2002/Ecore/OCL/Pivot"(body="self.NIDR() + self.NODR()")
  !ordered op Integer NDepR();
}

@gmf.node(label="nodeName", label.icon="false", color="255,194,173", border.color="0,0,0", size="80,40", figure="ellipse")
class Belief extends Element {

  @"http://www.eclipse.org/emf/2002/Ecore/OCL/Pivot"(body="self.elementContribution->select(cl : ContributionLink | cl.oclIsKindOf(ContributionLink))->size()")
  !ordered op Integer NCLB();

  @"http://www.eclipse.org/emf/2002/Ecore/OCL/Pivot"(body="self.elementDecompositionLink->select(dl : DecompositionLink | dl.oclIsKindOf(DecompositionLink))->size()")
  !ordered op Integer NDLB();

  @"http://www.eclipse.org/emf/2002/Ecore/OCL/Pivot"(body="self.NCLB() + self.NDLB()")
  !ordered op Integer NLB();

  @"http://www.eclipse.org/emf/2002/Ecore/OCL/Pivot"(body="self.secondElementDependency->select(dl : DependencyLink | dl.oclIsKindOf(DepElemLink))->size()")
  !ordered op Integer NIDB();

  @"http://www.eclipse.org/emf/2002/Ecore/OCL/Pivot"(body="self.elementDependency->select(dl : DependencyLink | dl.oclIsKindOf(DepElemLink))->size()")
  !ordered op Integer NODB();

  @"http://www.eclipse.org/emf/2002/Ecore/OCL/Pivot"(body="self.NIDB() + self.NODB()")
  !ordered op Integer NDepB();
}

abstract class Association extends Relationship {
}

@gmf.link(color="0,0,0", source="ISAactor", target="ISAsecondActor", target.decoration="arrow", label="relationshipName", label.readOnly="true", source.constraint="self <> oppositeEnd")
class ISA extends Association {
  ref Actor[1]#actorISA ISAactor;
  ref Actor[1]#secondActorISA ISAsecondActor;
}

@gmf.link(color="0,0,0", source="isPartOfActor", target="isPartOfSecondActor", target.decoration="arrow", label="relationshipName", label.readOnly="true", source.constraint="self <> oppositeEnd")
class IsPartOf extends Association {
  ref Actor[1]#actorIsPartOf isPartOfActor;
  ref Actor[1]#secondActorIsPartOf isPartOfSecondActor;
}

@gmf.link(color="0,0,0", source="playsAgent", target="playsRole", target.decoration="arrow", label="relationshipName", label.readOnly="true")
class Plays extends Association {
  ref Role[1]#rolePlays playsRole;
  ref Agent[1]#agentPlays playsAgent;
}

@gmf.link(color="0,0,0", source="coversPosition", target="coversRole", target.decoration="arrow", label="relationshipName", label.readOnly="true")
class Covers extends Association {
  ref Role[1]#roleCovers coversRole;
  ref Position[1]#positionCovers coversPosition;
}

@gmf.link(color="0,0,0", source="occupiesAgent", target="occupiesPosition", target.decoration="arrow", label="relationshipName", label.readOnly="true")
class Occupies extends Association {
  ref Position[1]#positionOccupies occupiesPosition;
  ref Agent[1]#agentOccupies occupiesAgent;
}

@gmf.link(color="0,0,0", source="INSagent", target="INSsecondAgent", target.decoration="arrow", label="relationshipName", label.readOnly="true", source.constraint="self <> oppositeEnd")
class INS extends Association {
  ref Agent[1]#agentINS INSagent;
  ref Agent[1]#secondAgentINS INSsecondAgent;
}

abstract class ContributionLink extends Relationship {
  ref Element[1]#elementContribution contributionElement;
  ref Softgoal[1]#softgoalContribution contributionSoftgoal;
}

@gmf.link(color="0,0,0", source="contributionElement", target="contributionSoftgoal", target.decoration="arrow", label="relationshipName", label.readOnly="true", source.constraint="self <> oppositeEnd")
class Make extends ContributionLink {
}

@gmf.link(color="0,0,0", source="contributionElement", target="contributionSoftgoal", target.decoration="arrow", label="relationshipName", label.readOnly="true", source.constraint="self <> oppositeEnd")
class Break extends ContributionLink {
}

@gmf.link(color="0,0,0", source="contributionElement", target="contributionSoftgoal", target.decoration="arrow", label="relationshipName", label.readOnly="true", source.constraint="self <> oppositeEnd")
class Help extends ContributionLink {
}

@gmf.link(color="0,0,0", source="contributionElement", target="contributionSoftgoal", target.decoration="arrow", label="relationshipName", label.readOnly="true", source.constraint="self <> oppositeEnd")
class Hurt extends ContributionLink {
}

@gmf.link(color="0,0,0", source="contributionElement", target="contributionSoftgoal", target.decoration="arrow", label="relationshipName", label.readOnly="true", label.text="Some+", source.constraint="self <> oppositeEnd")
class SomePlus extends ContributionLink {
}

@gmf.link(color="0,0,0", source="contributionElement", target="contributionSoftgoal", target.decoration="arrow", label="relationshipName", label.readOnly="true", label.text="Some-", source.constraint="self <> oppositeEnd")
class SomeMinus extends ContributionLink {
}

@gmf.link(color="0,0,0", source="contributionElement", target="contributionSoftgoal", target.decoration="arrow", label="relationshipName", label.readOnly="true", source.constraint="self <> oppositeEnd")
class And extends ContributionLink {
}

@gmf.link(color="0,0,0", source="contributionElement", target="contributionSoftgoal", target.decoration="arrow", label="relationshipName", label.readOnly="true", source.constraint="self <> oppositeEnd")
class Or extends ContributionLink {
}

@gmf.link(color="0,0,0", source="contributionElement", target="contributionSoftgoal", target.decoration="arrow", label="relationshipName", label.readOnly="true", source.constraint="self <> oppositeEnd")
class Unknown extends ContributionLink {
}

abstract class Decomposition extends Relationship {
}

@gmf.link(color="0,0,0", source="meansEndTask", target="meansEndGoal", target.decoration="filledclosedarrow", label.placement="none")
class MeansEnd extends Decomposition {
  ref Task[1]#taskMeansEnd meansEndTask;
  ref Goal[1]#goalMeansEnd meansEndGoal;
}

@gmf.link(color="0,0,0", source="decompositionTask", target="decompositionElement", label.placement="none", source.constraint="self <> oppositeEnd")
class DecompositionLink extends Decomposition {
  ref Task[1]#taskDecomposition decompositionTask;
  ref Element[1]#elementDecomposition decompositionElement;
}

enum DependencyStrength {
  commited = 0;
  open = 1;
  critical = 2;
}

@gmf.link(color="0,0,0", source="dependencyNode", target="dependencySecondNode", target.decoration="closedarrow", label="dependencyName")
class DependencyLink extends Relationship {
  attr DependencyStrength strength;
  unsettable attr String dependencyName = "D";
  ref Node[1]#nodeDependency dependencyNode;
  ref Node[1]#secondNodeDependency dependencySecondNode;
}

enum NFR {
  unknown = 0;
  functionalSuitability = 1;
  performanceEfficiency = 2;
  compatibility = 3;
  usability = 4;
  reliability = 5;
  security = 6;
  maintainability = 7;
  portability = 8;
}

