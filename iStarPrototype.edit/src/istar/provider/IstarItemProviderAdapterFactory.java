/**
 */
package istar.provider;

import istar.util.IstarAdapterFactory;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class IstarItemProviderAdapterFactory extends IstarAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public IstarItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link istar.ISTAR} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ISTARItemProvider istarItemProvider;

	/**
	 * This creates an adapter for a {@link istar.ISTAR}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createISTARAdapter() {
		if (istarItemProvider == null) {
			istarItemProvider = new ISTARItemProvider(this);
		}

		return istarItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link istar.Node} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected NodeItemProvider nodeItemProvider;

	/**
	 * This creates an adapter for a {@link istar.Node}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createNodeAdapter() {
		if (nodeItemProvider == null) {
			nodeItemProvider = new NodeItemProvider(this);
		}

		return nodeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link istar.Relationship} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RelationshipItemProvider relationshipItemProvider;

	/**
	 * This creates an adapter for a {@link istar.Relationship}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRelationshipAdapter() {
		if (relationshipItemProvider == null) {
			relationshipItemProvider = new RelationshipItemProvider(this);
		}

		return relationshipItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link istar.Actor} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ActorItemProvider actorItemProvider;

	/**
	 * This creates an adapter for a {@link istar.Actor}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createActorAdapter() {
		if (actorItemProvider == null) {
			actorItemProvider = new ActorItemProvider(this);
		}

		return actorItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link istar.Agent} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AgentItemProvider agentItemProvider;

	/**
	 * This creates an adapter for a {@link istar.Agent}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAgentAdapter() {
		if (agentItemProvider == null) {
			agentItemProvider = new AgentItemProvider(this);
		}

		return agentItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link istar.Position} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PositionItemProvider positionItemProvider;

	/**
	 * This creates an adapter for a {@link istar.Position}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPositionAdapter() {
		if (positionItemProvider == null) {
			positionItemProvider = new PositionItemProvider(this);
		}

		return positionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link istar.Role} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RoleItemProvider roleItemProvider;

	/**
	 * This creates an adapter for a {@link istar.Role}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRoleAdapter() {
		if (roleItemProvider == null) {
			roleItemProvider = new RoleItemProvider(this);
		}

		return roleItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link istar.Goal} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected GoalItemProvider goalItemProvider;

	/**
	 * This creates an adapter for a {@link istar.Goal}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createGoalAdapter() {
		if (goalItemProvider == null) {
			goalItemProvider = new GoalItemProvider(this);
		}

		return goalItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link istar.Softgoal} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SoftgoalItemProvider softgoalItemProvider;

	/**
	 * This creates an adapter for a {@link istar.Softgoal}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSoftgoalAdapter() {
		if (softgoalItemProvider == null) {
			softgoalItemProvider = new SoftgoalItemProvider(this);
		}

		return softgoalItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link istar.Task} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TaskItemProvider taskItemProvider;

	/**
	 * This creates an adapter for a {@link istar.Task}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTaskAdapter() {
		if (taskItemProvider == null) {
			taskItemProvider = new TaskItemProvider(this);
		}

		return taskItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link istar.Resource} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ResourceItemProvider resourceItemProvider;

	/**
	 * This creates an adapter for a {@link istar.Resource}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createResourceAdapter() {
		if (resourceItemProvider == null) {
			resourceItemProvider = new ResourceItemProvider(this);
		}

		return resourceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link istar.Belief} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected BeliefItemProvider beliefItemProvider;

	/**
	 * This creates an adapter for a {@link istar.Belief}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createBeliefAdapter() {
		if (beliefItemProvider == null) {
			beliefItemProvider = new BeliefItemProvider(this);
		}

		return beliefItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link istar.ISA} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ISAItemProvider isaItemProvider;

	/**
	 * This creates an adapter for a {@link istar.ISA}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createISAAdapter() {
		if (isaItemProvider == null) {
			isaItemProvider = new ISAItemProvider(this);
		}

		return isaItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link istar.IsPartOf} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IsPartOfItemProvider isPartOfItemProvider;

	/**
	 * This creates an adapter for a {@link istar.IsPartOf}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createIsPartOfAdapter() {
		if (isPartOfItemProvider == null) {
			isPartOfItemProvider = new IsPartOfItemProvider(this);
		}

		return isPartOfItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link istar.Plays} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PlaysItemProvider playsItemProvider;

	/**
	 * This creates an adapter for a {@link istar.Plays}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPlaysAdapter() {
		if (playsItemProvider == null) {
			playsItemProvider = new PlaysItemProvider(this);
		}

		return playsItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link istar.Covers} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CoversItemProvider coversItemProvider;

	/**
	 * This creates an adapter for a {@link istar.Covers}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCoversAdapter() {
		if (coversItemProvider == null) {
			coversItemProvider = new CoversItemProvider(this);
		}

		return coversItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link istar.Occupies} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected OccupiesItemProvider occupiesItemProvider;

	/**
	 * This creates an adapter for a {@link istar.Occupies}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createOccupiesAdapter() {
		if (occupiesItemProvider == null) {
			occupiesItemProvider = new OccupiesItemProvider(this);
		}

		return occupiesItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link istar.INS} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected INSItemProvider insItemProvider;

	/**
	 * This creates an adapter for a {@link istar.INS}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createINSAdapter() {
		if (insItemProvider == null) {
			insItemProvider = new INSItemProvider(this);
		}

		return insItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link istar.Make} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MakeItemProvider makeItemProvider;

	/**
	 * This creates an adapter for a {@link istar.Make}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMakeAdapter() {
		if (makeItemProvider == null) {
			makeItemProvider = new MakeItemProvider(this);
		}

		return makeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link istar.Break} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected BreakItemProvider breakItemProvider;

	/**
	 * This creates an adapter for a {@link istar.Break}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createBreakAdapter() {
		if (breakItemProvider == null) {
			breakItemProvider = new BreakItemProvider(this);
		}

		return breakItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link istar.Help} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected HelpItemProvider helpItemProvider;

	/**
	 * This creates an adapter for a {@link istar.Help}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createHelpAdapter() {
		if (helpItemProvider == null) {
			helpItemProvider = new HelpItemProvider(this);
		}

		return helpItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link istar.Hurt} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected HurtItemProvider hurtItemProvider;

	/**
	 * This creates an adapter for a {@link istar.Hurt}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createHurtAdapter() {
		if (hurtItemProvider == null) {
			hurtItemProvider = new HurtItemProvider(this);
		}

		return hurtItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link istar.SomePlus} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SomePlusItemProvider somePlusItemProvider;

	/**
	 * This creates an adapter for a {@link istar.SomePlus}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSomePlusAdapter() {
		if (somePlusItemProvider == null) {
			somePlusItemProvider = new SomePlusItemProvider(this);
		}

		return somePlusItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link istar.SomeMinus} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SomeMinusItemProvider someMinusItemProvider;

	/**
	 * This creates an adapter for a {@link istar.SomeMinus}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSomeMinusAdapter() {
		if (someMinusItemProvider == null) {
			someMinusItemProvider = new SomeMinusItemProvider(this);
		}

		return someMinusItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link istar.And} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AndItemProvider andItemProvider;

	/**
	 * This creates an adapter for a {@link istar.And}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAndAdapter() {
		if (andItemProvider == null) {
			andItemProvider = new AndItemProvider(this);
		}

		return andItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link istar.Or} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected OrItemProvider orItemProvider;

	/**
	 * This creates an adapter for a {@link istar.Or}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createOrAdapter() {
		if (orItemProvider == null) {
			orItemProvider = new OrItemProvider(this);
		}

		return orItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link istar.Unknown} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected UnknownItemProvider unknownItemProvider;

	/**
	 * This creates an adapter for a {@link istar.Unknown}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createUnknownAdapter() {
		if (unknownItemProvider == null) {
			unknownItemProvider = new UnknownItemProvider(this);
		}

		return unknownItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link istar.MeansEnd} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MeansEndItemProvider meansEndItemProvider;

	/**
	 * This creates an adapter for a {@link istar.MeansEnd}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMeansEndAdapter() {
		if (meansEndItemProvider == null) {
			meansEndItemProvider = new MeansEndItemProvider(this);
		}

		return meansEndItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link istar.DecompositionLink} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DecompositionLinkItemProvider decompositionLinkItemProvider;

	/**
	 * This creates an adapter for a {@link istar.DecompositionLink}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDecompositionLinkAdapter() {
		if (decompositionLinkItemProvider == null) {
			decompositionLinkItemProvider = new DecompositionLinkItemProvider(this);
		}

		return decompositionLinkItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link istar.DependencyLink} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DependencyLinkItemProvider dependencyLinkItemProvider;

	/**
	 * This creates an adapter for a {@link istar.DependencyLink}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDependencyLinkAdapter() {
		if (dependencyLinkItemProvider == null) {
			dependencyLinkItemProvider = new DependencyLinkItemProvider(this);
		}

		return dependencyLinkItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (istarItemProvider != null) istarItemProvider.dispose();
		if (nodeItemProvider != null) nodeItemProvider.dispose();
		if (relationshipItemProvider != null) relationshipItemProvider.dispose();
		if (actorItemProvider != null) actorItemProvider.dispose();
		if (agentItemProvider != null) agentItemProvider.dispose();
		if (positionItemProvider != null) positionItemProvider.dispose();
		if (roleItemProvider != null) roleItemProvider.dispose();
		if (goalItemProvider != null) goalItemProvider.dispose();
		if (softgoalItemProvider != null) softgoalItemProvider.dispose();
		if (taskItemProvider != null) taskItemProvider.dispose();
		if (resourceItemProvider != null) resourceItemProvider.dispose();
		if (beliefItemProvider != null) beliefItemProvider.dispose();
		if (isaItemProvider != null) isaItemProvider.dispose();
		if (isPartOfItemProvider != null) isPartOfItemProvider.dispose();
		if (playsItemProvider != null) playsItemProvider.dispose();
		if (coversItemProvider != null) coversItemProvider.dispose();
		if (occupiesItemProvider != null) occupiesItemProvider.dispose();
		if (insItemProvider != null) insItemProvider.dispose();
		if (makeItemProvider != null) makeItemProvider.dispose();
		if (breakItemProvider != null) breakItemProvider.dispose();
		if (helpItemProvider != null) helpItemProvider.dispose();
		if (hurtItemProvider != null) hurtItemProvider.dispose();
		if (somePlusItemProvider != null) somePlusItemProvider.dispose();
		if (someMinusItemProvider != null) someMinusItemProvider.dispose();
		if (andItemProvider != null) andItemProvider.dispose();
		if (orItemProvider != null) orItemProvider.dispose();
		if (unknownItemProvider != null) unknownItemProvider.dispose();
		if (meansEndItemProvider != null) meansEndItemProvider.dispose();
		if (decompositionLinkItemProvider != null) decompositionLinkItemProvider.dispose();
		if (dependencyLinkItemProvider != null) dependencyLinkItemProvider.dispose();
	}

}
